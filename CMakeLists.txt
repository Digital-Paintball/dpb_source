PROJECT(HL2SDK)

SET(LIBRARY_OUTPUT_PATH ${HL2SDK_BINARY_DIR}/lib CACHE INTERNAL "Single output directory for building all libraries.")
SET(EXECUTABLE_OUTPUT_PATH ${HL2SDK_BINARY_DIR}/bin CACHE INTERNAL "Single output directory for building all executables.")

IF(WIN32)
	# Single-threaded, static link instead of default multithreaded, dynamic link
	SET(CMAKE_CXX_FLAGS "/W4 /Zm1000 /EHsc /GX /GR" CACHE INTERNAL "Configuration")

	SET(CMAKE_CXX_FLAGS_RELEASE "/ML /O2 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_DEBUG "/MLd /ZI /Od /GZ" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_MINSIZEREL "/ML /O1 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/ML /ZI /O2 /D NDEBUG" CACHE INTERNAL "Configuration")

	SET(CMAKE_C_FLAGS_DEBUG "/MLd /ZI /Od /GZ" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_MINSIZEREL "/ML /O1 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_RELEASE "/ML /O2 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_RELWITHDEBINFO "/ML /ZI /O2 /D NDEBUG" CACHE INTERNAL "Configuration")
	
	SET(CMAKE_CXX_FLAGS_INIT "/W4 /Zm1000 /GR" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_DEBUG_INIT "/MLd /Zi /Od /RTC1" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "/ML /O1 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_RELEASE_INIT "/ML /O2 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "/ML /Zi /O2 /D NDEBUG" CACHE INTERNAL "Configuration")

	SET(CMAKE_C_FLAGS_INIT "/W4 /Zm1000" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_DEBUG_INIT "/MLd /ZI /Od /GZ" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_MINSIZEREL_INIT "/ML /O1 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_RELEASE_INIT "/ML /O2 /D NDEBUG" CACHE INTERNAL "Configuration")
	SET(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "/ML /ZI /O2 /D NDEBUG" CACHE INTERNAL "Configuration")
ENDIF(WIN32)

OPTION(BUILD_SDK	"Build the SDK as a standalone game."					OFF)
OPTION(BUILD_HL2	"Build the SDK as a mod for Half-Life 2."				OFF)
OPTION(BUILD_HL2MP	"Build the SDK as a mod for Half-Life 2: Deathmatch."	OFF)

# Make sure we have only one option enabled.
IF(NOT BUILD_SDK AND NOT BUILD_HL2 AND NOT BUILD_HL2MP)
	SET(BUILD_SDK ON CACHE INTERNAL "")
	MESSAGE("!! Defaulting to SDK build. To choose another, use BUILD_SDK BUILD_HL2 or BUILD_HL2MP.")
ELSE(NOT BUILD_SDK AND NOT BUILD_HL2 AND NOT BUILD_HL2MP)
	IF(BUILD_SDK)
		IF(BUILD_HL2)
			SET(BUILD_HL2 OFF CACHE INTERNAL "")
			MESSAGE("!! BUILD_SDK and BUILD_HL2 are mutually exclusive. BUILD_HL2 will be disabled.")
		ENDIF(BUILD_HL2)
		IF(BUILD_HL2MP)
			SET(BUILD_HL2MP OFF CACHE INTERNAL "")
			MESSAGE("!! BUILD_SDK and BUILD_HL2MP are mutually exclusive. BUILD_HL2MP will be disabled.")
		ENDIF(BUILD_HL2MP)
	ENDIF(BUILD_SDK)
	IF(BUILD_HL2)
		IF(BUILD_HL2MP)
			SET(BUILD_HL2MP OFF CACHE INTERNAL "")
			MESSAGE("!! BUILD_HL2 and BUILD_HL2MP are mutually exclusive. BUILD_HL2MP will be disabled.")
		ENDIF(BUILD_HL2MP)
	ENDIF(BUILD_HL2)
ENDIF(NOT BUILD_SDK AND NOT BUILD_HL2 AND NOT BUILD_HL2MP)

#Set build-dependant flags.
IF(BUILD_SDK)
	SET( SDK_BUILD_FLAGS
		-DSDK_DLL
	)
ENDIF(BUILD_SDK)

IF(BUILD_HL2)
	SET( SDK_BUILD_SERVER_FLAGS
		-DHL2_DLL
	)
	SET( SDK_BUILD_CLIENT_FLAGS
		-DHL2_CLIENT_DLL
	)
ENDIF(BUILD_HL2)

IF(BUILD_HL2MP)
	SET( SDK_BUILD_FLAGS
		-DHL2MP
	)
	SET( SDK_BUILD_SERVER_FLAGS
		-DHL2_DLL
	)
	SET( SDK_BUILD_CLIENT_FLAGS
		-DHL2_CLIENT_DLL
	)
ENDIF(BUILD_HL2MP)

SUBDIRS(src content)